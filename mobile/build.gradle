import com.android.build.OutputFile
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

apply plugin: 'io.fabric'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

def getCurrentFlavor() {
    String task = getGradle().getStartParameter().getTaskRequests().toString()
    Matcher matcher = Pattern.compile("(assemble|generate)\\w*(Release|Debug)").matcher(task)
    if (matcher.find()) return matcher.group(2).toLowerCase() else {
        println "Warning: No match found for $task"
        return "debug"
    }
}

android {
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    defaultConfig {
        applicationId "be.mygod.dhcpv6client"
        minSdkVersion 21
        targetSdkVersion 28
        resConfigs "zh-rCN"
        versionCode 1030000
        versionName "1.3.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
//                arguments "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        debug {
            pseudoLocalesEnabled true
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }
    flavorDimensions("freedom")
    productFlavors {
        freedom {
            dimension "freedom"
            buildConfigField "boolean", "DONATIONS", "true"
        }
        google {
            dimension "freedom"
            buildConfigField "boolean", "DONATIONS", "false"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.browser:browser:$androidxVersion"
    implementation "androidx.core:core-ktx:$androidxVersion"
    implementation "androidx.preference:preference:$androidxVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation 'com.android.billingclient:billing:1.2'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'
    implementation "com.google.android.material:material:$androidxVersion"
    implementation 'com.takisoft.preferencex:preferencex:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

apply plugin: 'com.google.gms.google-services'

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
if (getCurrentFlavor() == 'release') android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def offset = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (offset != null) output.versionCodeOverride = variant.versionCode + offset
    }
}
